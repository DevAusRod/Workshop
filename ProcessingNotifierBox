// Create the box element
const box = document.createElement('div');
box.style.position = 'fixed';
box.style.bottom = '10px';
box.style.left = '10px';
box.style.width = '50px';
box.style.height = '50px';
box.style.backgroundColor = 'blue';
box.style.color = 'white';
box.style.textAlign = 'center';
box.style.lineHeight = '50px';
box.style.cursor = 'pointer';
box.innerHTML = 'Status';

// Append the box to the document body
document.body.appendChild(box);

let isProcessing = false;
let switchTime;
let resetTimeout;

// Function to toggle box color
function toggleBoxColor() {
  box.style.backgroundColor = isProcessing ? 'red' : 'blue';
}

// Function to reset processing status after a delay
function resetProcessingStatus() {
  isProcessing = false;
  toggleBoxColor();
}

// Function to handle cursor change
function handleCursorChange(mutations) {
  mutations.forEach(function (mutation) {
    const currentCursor = document.body.style.cursor;

    if (currentCursor === 'wait' && !isProcessing) {
      switchTime = new Date().getTime();
      isProcessing = true;
      toggleBoxColor();
    } else if (currentCursor === 'default' && isProcessing) {
      const timeDifference = new Date().getTime() - switchTime;
      if (timeDifference > 1500) {
        isProcessing = false;
        toggleBoxColor();

        // Reset processing status after a delay
        clearTimeout(resetTimeout);
        resetTimeout = setTimeout(resetProcessingStatus, 1500);
      }
    }
  });
}

// Create a MutationObserver to watch for changes in the style attribute of the body
const observer = new MutationObserver(handleCursorChange);
observer.observe(document.body, { attributes: true, attributeFilter: ['style'] });
